package de.uniwue.jpp.deckgen.service.csp;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

import de.uniwue.jpp.deckgen.model.ICard;

public class BacktrackingSolver implements ISolver {

	public BacktrackingSolver() {
		super();
	}

	public Set<ICard> solve(Set<ICard> allCards, Set<IConstraint> constraints)
			throws NoSolutionFoundException {
		
		int possibleSize = possibleSetSizeWithConstraints(allCards, constraints);
		
		if(10==possibleSize)
			return createSet(allCards,constraints,false);
		if(possibleSize<10)
			throw new NoSolutionFoundException("Zu wenig Karten",constraints);
		
		return createSet(allCards,constraints,true);
		
	}
	

	private Set<ICard> createSet(Set<ICard> allCards, Set<IConstraint> constraints, boolean randomize){
		Set<ICard> goodCards = new HashSet<ICard>();
		
		int size = allCards.size();
		int tryCount=0,rand=size;
		int[] alreadyCheckedCards = new int[size*size*size*2];
		ICard[] allCardsArray = new ICard[size*size];
		allCards.toArray(allCardsArray);
		ICard tempCard = null;
		
		//System.out.println("solve().allCardsSize: " + allCards.size());
		//System.out.println("randomize: " + randomize);
		if(randomize){
			while(goodCards.size()!=10){
				rand = new Random().nextInt(size);
				
				if(!isNumberAlreadyTested(rand,alreadyCheckedCards)){
					tempCard = allCardsArray[rand];
					if(!cardFulfillsConstraint(tempCard,constraints))
						goodCards.add(tempCard);
				}
				
				alreadyCheckedCards[tryCount]=rand;
				
				if(goodCards.size()==10){
					System.out.println("Lösung gefunden! CardCount: " + goodCards.size());
					return goodCards;
				} else if(tryCount>size*size)
					throw new NoSolutionFoundException("goodCards.size: " + goodCards.size(),constraints);
				
				tryCount++;
			}
			
		} else {
			for(int i=0;i<size;i++){
				tempCard = allCardsArray[i];
				if(cardFulfillsConstraint(tempCard,constraints))
					goodCards.add(tempCard);
				
			}
			return goodCards;
		}
		throw new NoSolutionFoundException("",constraints);		
	}
	
	private boolean cardFulfillsConstraint(ICard card, Set<IConstraint> constraints){
		for(IConstraint constraint: constraints){
			if(constraint.isSatisfied(card))
				return true;
		}
		return false;
	}
	
	private boolean isNumberAlreadyTested(int number, int[] array){
		for(int i=0;i<array.length;i++){
			if(number==array[i])
				return true;
		}
		return false;
	}
	
	private int possibleSetSizeWithConstraints(Set<ICard> cards, Set<IConstraint> constraints){
		int tempSize = cards.size();
		
		for(ICard tempCard : cards){
			if(cardFulfillsConstraint(tempCard,constraints)){
				tempSize--;
			}
		}
		//System.out.println("Mögliche Deckgroesse: " + tempSize + "/"+cards.size());
		return tempSize;
	}
}
